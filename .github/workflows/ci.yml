name: DevSecOps CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  bandit-scan:
    name: SAST - Bandit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install Bandit
        run: python -m pip install --upgrade pip && pip install bandit
      - name: Run Bandit
        run: bandit -r src/test-snippet -f html -o bandit-report.html || true
      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.html

  
  checkov-scan:
    name: SAST for IaC - Checkov 
    runs-on: ubuntu-latest
    needs: bandit-scan
    steps:
      - uses: actions/checkout@v4
      - name: Install checkov
        run: python -m pip install --upgrade pip && pip install checkov
      - name: Run Checkov
        run: checkov -d src/test-snippet -o cli --output-file-path . --output-bc-ids || true
      - name: Generate Checkov HTML report
        run: |
          echo '<!DOCTYPE html><html><head><meta charset="UTF-8"><title>Checkov Report</title></head><body><h1>Checkov Scan Results</h1><pre>' > checkov-report.html
          cat results_cli.txt >> checkov-report.html || echo 'No results' >> checkov-report.html
          echo '</pre></body></html>' >> checkov-report.html
      - name: Upload Checkov report
        uses: actions/upload-artifact@v4
        with:
          name: checkov-report
          path: checkov-report.html

  build-and-trivy:
    name: Container Security - Build + Trivy
    runs-on: ubuntu-latest
    needs: checkov-scan
    steps:
      - uses: actions/checkout@v4
      - name: Build python sample image
        run: docker build -t test-snippet:latest ./src/test-snippet
      - name: Create trivy output dir
        run: mkdir -p trivy-output
      - name: Run Trivy scan
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "${{ github.workspace }}/trivy-output:/output" aquasec/trivy image --format template --template "@contrib/html.tpl" --output /output/trivy-report.html test-snippet:latest || true
      - name: Upload Trivy report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-output/trivy-report.html

  dependency-check:
    name: SCA - OWASP Dependency-Check 
    runs-on: ubuntu-latest
    needs: build-and-trivy
    env:
      NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
    steps:
      - uses: actions/checkout@v4
      - name: Debug - list workspace contents
        run: |
          echo "Workspace: $GITHUB_WORKSPACE"
          ls -la "$GITHUB_WORKSPACE" || true
          echo 'test-snippet content:'
          ls -la "$GITHUB_WORKSPACE/src/test-snippet" || true
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '16'
      - name: Install node dependencies for src/test-snippet (if present)
        run: |
          if [ -f "${{ github.workspace }}/src/test-snippet/package.json" ]; then
            echo 'package.json found, running npm ci'
            cd "${{ github.workspace }}/src/test-snippet" || exit 1
            npm ci || npm install
          else
            echo 'No package.json found in src/test-snippet, skipping npm install'
          fi
      - name: Create output dir
        run: mkdir -p dc-output
      - name: Restore cached Dependency-Check Docker image (tar)
        uses: actions/cache@v4
        with:
          path: .cache/owasp-dependency-check-image.tar
          key: owasp-dependency-check-image-${{ runner.os }}-v1
          restore-keys: owasp-dependency-check-image-${{ runner.os }}-

      - name: Load or pull Dependency-Check image
        run: |
          IMAGE_TAR=".cache/owasp-dependency-check-image.tar"
          if [ -f "$IMAGE_TAR" ]; then
            echo "Loading dependency-check image from cache"
            docker load -i "$IMAGE_TAR"
          else
            echo "Cache miss: pulling image and saving to cache"
            docker pull owasp/dependency-check:latest
            mkdir -p .cache
            docker save owasp/dependency-check:latest -o "$IMAGE_TAR"
          fi

      - name: Cache dependency-check NVD DB (dc-cache)
        uses: actions/cache@v4
        with:
          path: dc-cache
          key: dependency-check-db-${{ runner.os }}-v1
          restore-keys: dependency-check-db-${{ runner.os }}-

      - name: Populate dependency-check NVD DB into cache (if empty)
        run: |
          # If dc-cache is small (<1MB) then run a quick scan to force the container
          # to download the NVD DB into the mounted cache directory.
          CACHE_BYTES=$(du -sb dc-cache 2>/dev/null | cut -f1 || echo 0)
          echo "dc-cache size (bytes): $CACHE_BYTES"
          if [ "$CACHE_BYTES" -lt 1000000 ]; then
            echo 'dc-cache appears to be empty or small; preparing to populate NVD DB (this may take a while)...'
            echo 'Listing dc-cache before populate:'
            ls -la dc-cache || true

            # Remove obvious stale lock files if present to avoid H2 exclusive lock issues
            echo 'Removing stale H2/lock files (if any) in dc-cache...'
            find dc-cache -type f \( -name '*.lock' -o -name '*.lck' -o -name 'H2*' \) -print -delete || true

            echo 'Running dependency-check container as root to populate cache (writes will be owned by root initially)...'
            docker run --rm --user 0 \
              -e NVD_API_KEY="$NVD_API_KEY" \
              -v "${{ github.workspace }}/dc-cache:/usr/share/dependency-check/data" \
              -v "${{ github.workspace }}/src/test-snippet:/src" \
              owasp/dependency-check:latest --nvdApiKey "$NVD_API_KEY" --scan /src --format JSON --out /tmp/report || true

            echo 'After populate run, host dc-cache listing (owner and size):'
            ls -la dc-cache || true
            du -sh dc-cache || true

            # Ensure runner user can access the files (chown back to runner)
            echo 'Setting ownership of dc-cache back to runner user...'
            sudo chown -R $(id -u):$(id -g) dc-cache || true
            echo 'After chown, dc-cache listing:'
            ls -la dc-cache || true
          else
            echo 'dc-cache looks populated; skipping populate step.'
          fi

      - name: Prepare dc-cache for run (remove locks & set perms)
        run: |
          echo 'Removing stale lock files from dc-cache if present'
          find dc-cache -type f \( -name '*.lock' -o -name '*.lck' -o -name 'H2*' \) -print -delete || true
          echo 'Make dc-cache writable for container process'
          chmod -R a+rwX dc-cache || true

      - name: Run OWASP Dependency-Check (Docker) using cached image and DB
        run: |
          # mount of dc-cache -> /usr/share/dependency-check/data assumes the
          # container uses that path for the NVD database. Run container as root
          # so it can obtain the H2 exclusive lock and update DB files.
          docker run --rm --user 0 \
            -e NVD_API_KEY="$NVD_API_KEY" \
            -v "${{ github.workspace }}/src/test-snippet:/src" \
            -v "${{ github.workspace }}/dc-output:/report" \
            -v "${{ github.workspace }}/dc-cache:/usr/share/dependency-check/data" \
            owasp/dependency-check:latest --noupdate --nvdApiKey "$NVD_API_KEY" --scan /src --format HTML --out /report || true
      - name: Debug - list dc-output
        run: |
          echo 'dc-output listing:'
          ls -la dc-output || true
          if [ -f dc-output/dependency-check-report.html ]; then
            echo 'dependency-check-report.html exists'
          else
            echo 'dependency-check-report.html not found'
          fi
      - name: Upload Dependency-Check report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: dc-output/**