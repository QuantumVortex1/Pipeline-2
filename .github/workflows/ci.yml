name: DevSecOps CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  bandit-scan:
    name: SAST - Bandit
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install Bandit
        run: python -m pip install --upgrade pip && pip install bandit bandit-sarif-formatter
      - name: Run Bandit (SARIF)
        run: bandit -r src -f sarif -o bandit-report.sarif || true
      - name: Upload Bandit SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: bandit-report.sarif
          category: bandit
      - name: Upload Bandit report (artifact)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-report
          path: bandit-report.sarif

  
  checkov-scan:
    name: SAST for IaC - Checkov 
    runs-on: ubuntu-latest
    needs: bandit-scan
    permissions:
      security-events: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Install checkov
        run: python -m pip install --upgrade pip && pip install checkov
      - name: Run Checkov (SARIF)
        run: checkov -d src -o sarif --output-file-path checkov-report.sarif || true
      - name: Upload Checkov SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-report.sarif
          category: checkov
      - name: Upload Checkov report (artifact)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: checkov-report
          path: checkov-report.sarif

  build-and-trivy:
    name: Container Security - Build + Trivy
    runs-on: ubuntu-latest
    needs: checkov-scan
    permissions:
      security-events: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Create trivy output dir
        run: mkdir -p trivy-output
      
      # Build and scan minimal-app
      - name: Build minimal-app image
        run: docker build -t minimal-app:latest ./src/minimal-app
      - name: Run Trivy scan on minimal-app (SARIF)
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "${{ github.workspace }}/trivy-output:/output" aquasec/trivy image --severity CRITICAL,HIGH --format sarif --output /output/trivy-minimal-app.sarif minimal-app:latest || true
      
      # Build and scan node-api
      - name: Build node-api image
        run: docker build -t node-api:latest ./src/node-api
      - name: Run Trivy scan on node-api (SARIF)
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v "${{ github.workspace }}/trivy-output:/output" aquasec/trivy image --severity CRITICAL,HIGH --format sarif --output /output/trivy-node-api.sarif node-api:latest || true
      
      # Upload results
      - name: Upload Trivy minimal-app SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-output/trivy-minimal-app.sarif
          category: trivy-minimal-app
      - name: Upload Trivy node-api SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-output/trivy-node-api.sarif
          category: trivy-node-api
      - name: Upload Trivy reports (artifact)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-reports
          path: trivy-output/*.sarif

  dependency-check:
    name: SCA - OWASP Dependency-Check 
    runs-on: ubuntu-latest
    needs: build-and-trivy
    permissions:
      security-events: write
      contents: read
    env:
      NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install node dependencies for src/node-api
        run: |
          if [ -f "${{ github.workspace }}/src/node-api/package.json" ]; then
            echo 'package.json found, running npm install'
            cd "${{ github.workspace }}/src/node-api" || exit 1
            npm install
          else
            echo 'No package.json found in src/node-api'
          fi
      
      - name: Create output dir
        run: mkdir -p dc-output
      
      - name: Restore cached Dependency-Check Docker image (tar)
        uses: actions/cache@v4
        with:
          path: .cache/owasp-dependency-check-image.tar
          key: owasp-dependency-check-image-${{ runner.os }}-v1
          restore-keys: owasp-dependency-check-image-${{ runner.os }}-

      - name: Load or pull Dependency-Check image
        run: |
          IMAGE_TAR=".cache/owasp-dependency-check-image.tar"
          if [ -f "$IMAGE_TAR" ]; then
            echo "Loading dependency-check image from cache"
            docker load -i "$IMAGE_TAR"
          else
            echo "Cache miss: pulling image and saving to cache"
            docker pull owasp/dependency-check:latest
            mkdir -p .cache
            docker save owasp/dependency-check:latest -o "$IMAGE_TAR"
          fi

      - name: Cache dependency-check NVD DB (dc-cache)
        uses: actions/cache@v4
        with:
          path: dc-cache
          key: dependency-check-db-${{ runner.os }}-v1
          restore-keys: dependency-check-db-${{ runner.os }}-

      - name: Populate dependency-check NVD DB into cache (if empty)
        run: |
          CACHE_BYTES=$(du -sb dc-cache 2>/dev/null | cut -f1 || echo 0)
          echo "dc-cache size (bytes): $CACHE_BYTES"
          if [ "$CACHE_BYTES" -lt 1000000 ]; then
            echo 'dc-cache appears to be empty or small; preparing to populate NVD DB...'
            find dc-cache -type f \( -name '*.lock' -o -name '*.lck' -o -name 'H2*' \) -print -delete || true
            
            docker run --rm --user 0 \
              -e NVD_API_KEY="$NVD_API_KEY" \
              -v "${{ github.workspace }}/dc-cache:/usr/share/dependency-check/data" \
              -v "${{ github.workspace }}/src/node-api:/src" \
              owasp/dependency-check:latest --nvdApiKey "$NVD_API_KEY" --scan /src --format JSON --out /tmp/report || true
            
            sudo chown -R $(id -u):$(id -g) dc-cache || true
          else
            echo 'dc-cache looks populated; skipping populate step.'
          fi

      - name: Prepare dc-cache for run (remove locks & set perms)
        run: |
          find dc-cache -type f \( -name '*.lock' -o -name '*.lck' -o -name 'H2*' \) -print -delete || true
          chmod -R a+rwX dc-cache || true

      - name: Run OWASP Dependency-Check (Docker) using cached image and DB
        run: |
          docker run --rm --user 0 \
            -e NVD_API_KEY="$NVD_API_KEY" \
            -v "${{ github.workspace }}/src/node-api:/src" \
            -v "${{ github.workspace }}/dc-output:/report" \
            -v "${{ github.workspace }}/dc-cache:/usr/share/dependency-check/data" \
            owasp/dependency-check:latest --noupdate --nvdApiKey "$NVD_API_KEY" --scan /src --format SARIF --out /report || true
      
      - name: Upload Dependency-Check SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: dc-output/dependency-check-report.sarif
          category: dependency-check
      
      - name: Upload Dependency-Check report (artifact)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-check-report
          path: dc-output/**